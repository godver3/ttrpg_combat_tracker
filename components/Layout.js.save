import React, { useState, useEffect } from 'react';
import styles from './Layout.module.css';
import Libraries from './Libraries';
import DiceRoller from './DiceRoller';
import CombatTracker from './CombatTracker';
import { ChevronLeft, ChevronRight, Book, Dice6, Clock } from 'lucide-react';

import React, { useState, useEffect } from 'react';
import styles from './Layout.module.css';
import Libraries from './Libraries';
import DiceRoller from './DiceRoller';
import CombatTracker from './CombatTracker';
import { ChevronLeft, ChevronRight, Book, Dice6, Clock } from 'lucide-react';
import { setCombatants } from '../lib/combatants';

const Layout = () => {
  const [combatants, setCombatants] = useState([]);
  const [isCombatActive, setIsCombatActive] = useState(false);
  const [enemyCounts, setEnemyCounts] = useState({});
  const [rollPlayerInitiatives, setRollPlayerInitiatives] = useState(true);
  const [groupEnemies, setGroupEnemies] = useState(false);
  const [librariesOpen, setLibrariesOpen] = useState(false);
  const [diceRollerOpen, setDiceRollerOpen] = useState(false);
  const [combatTime, setCombatTime] = useState(0);
  const [feedback, setFeedback] = useState(null);
  const [feedbackTimeout, setFeedbackTimeout] = useState(null);

  useEffect(() => {
    let interval;
    if (isCombatActive) {
      interval = setInterval(() => {
        setCombatTime(prevTime => prevTime + 1);
      }, 1000);
    } else {
      setCombatTime(0);
    }
    return () => clearInterval(interval);
  }, [isCombatActive]);

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const rollInitiative = (character) => {
    const initiativeRoll = Math.floor(Math.random() * 20) + 1;
    return initiativeRoll + parseInt(character.init);
  };

  const calculateHealth = (hpString) => {
    const diceRegex = /(\d+)d(\d+)(?:\s*\+\s*(\d+))?/;
    const match = hpString.match(diceRegex);
    
    if (match) {
      const [, numDice, diceSize, modifier] = match;
      let total = 0;
      for (let i = 0; i < parseInt(numDice); i++) {
        total += Math.floor(Math.random() * parseInt(diceSize)) + 1;
      }
      if (modifier) {
        total += parseInt(modifier);
      }
      return total;
    }
    
    return parseInt(hpString) || 0;
  };

  const showFeedback = (message) => {
    setFeedback(message);
    if (feedbackTimeout) {
      clearTimeout(feedbackTimeout);
    }
    const newTimeout = setTimeout(() => setFeedback(null), 3000);
    setFeedbackTimeout(newTimeout);
  };

  const handleAddToCombat = (character) => {
    if (character.type === 'enemy') {
      setEnemyCounts(prev => {
        const newCount = (prev[character.name] || 0) + 1;
        return { ...prev, [character.name]: newCount };
      });
      const calculatedHP = calculateHealth(character.hp);
      const newCharacter = {
        ...character,
        id: Date.now(),
        name: `${character.name} ${enemyCounts[character.name] + 1 || 1}`,
        initiative: null,
        maxHP: calculatedHP,
        currentHP: calculatedHP,
        groupId: character.name
      };
      setCombatants(prev => [...prev, newCharacter]);
      showFeedback(`Added enemy: ${newCharacter.name}`);
      return { count: enemyCounts[character.name] + 1 || 1 };
    } else {
      if (!combatants.some(c => c.name === character.name)) {
        const newCharacter = {
          ...character,
          id: Date.now(),
          initiative: null,
          maxHP: parseInt(character.hp),
          currentHP: parseInt(character.hp)
        };
        setCombatants(prev => [...prev, newCharacter]);
        showFeedback(`Added player: ${newCharacter.name}`);
      }
      return { count: 1 };
    }
  };

  const startCombat = () => {
    setCombatants(prevCombatants => {
      let rolledCombatants = prevCombatants.map(combatant => {
        if (combatant.type === 'player' && !rollPlayerInitiatives) {
          return combatant;
        }
        const initiativeRoll = rollInitiative(combatant);
        return { ...combatant, initiative: initiativeRoll };
      });

      if (groupEnemies) {
        const groupedInitiatives = {};
        rolledCombatants = rolledCombatants.map(combatant => {
          if (combatant.type === 'enemy' && combatant.groupId) {
            if (!(combatant.groupId in groupedInitiatives)) {
              groupedInitiatives[combatant.groupId] = rollInitiative(combatant);
            }
            return { ...combatant, initiative: groupedInitiatives[combatant.groupId] };
          }
          return combatant;
        });
      }

      return rolledCombatants.sort((a, b) => (b.initiative || 0) - (a.initiative || 0));
    });

    setIsCombatActive(true);
  };

  return (
    <div className={styles.layout}>
      <div className={styles.mobileButtons}>
        <button className={styles.mobileButton} onClick={() => setLibrariesOpen(true)}>
          <Book size={20} /> Libraries
        </button>
        <button className={styles.mobileButton} onClick={() => setDiceRollerOpen(true)}>
          <Dice6 size={20} /> Dice Roller
        </button>
      </div>
      {feedback && <div className={styles.feedback}>{feedback}</div>}
      <div className={`${styles.shade} ${styles.leftShade} ${librariesOpen ? styles.open : ''}`}>
        <button className={styles.toggleButton} onClick={() => setLibrariesOpen(false)}>
          <ChevronLeft />
        </button>
        <div className={styles.shadeContent}>
          <h2 className={styles.columnTitle}>Libraries</h2>
          <Libraries addToCombat={handleAddToCombat} />
        </div>
      </div>
      <div className={styles.mainContent}>
        <h2 className={styles.columnTitle}>Combat Tracker</h2>
        <div className={styles.combatOptions}>
          <label>
            <input
              type="checkbox"
              checked={rollPlayerInitiatives}
              onChange={(e) => setRollPlayerInitiatives(e.target.checked)}
            />
            Roll Player Initiatives
          </label>
          <label>
            <input
              type="checkbox"
              checked={groupEnemies}
              onChange={(e) => setGroupEnemies(e.target.checked)}
            />
            Group Enemies
          </label>
          <div className={styles.combatTimer}>
            <Clock size={16} />
            <span>{formatTime(combatTime)}</span>
          </div>
        </div>
        <CombatTracker
          combatants={combatants}
          setCombatants={setCombatants}
          isCombatActive={isCombatActive}
          setIsCombatActive={setIsCombatActive}
          setEnemyCounts={setEnemyCounts}
          startCombat={startCombat}
          combatTime={combatTime}
          setCombatTime={setCombatTime}
        />
      </div>
      <div className={`${styles.shade} ${styles.rightShade} ${diceRollerOpen ? styles.open : ''}`}>
        <button className={styles.toggleButton} onClick={() => setDiceRollerOpen(false)}>
          <ChevronRight />
        </button>
        <div className={styles.shadeContent}>
          <h2 className={`${styles.columnTitle} ${styles.diceRollerTitle}`}>Dice Roller</h2>
          <DiceRoller />
        </div>
      </div>
    </div>
  );
};

export default Layout;
